@model IEnumerable<CartItem>

@{
    ViewData["Title"] = "Index";
}


<div class="row">
    <div class="col-md-8">
        <h2>Your Cart</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
            <div class="media">
                <img src="data:image;base64,@(Convert.ToBase64String(item.SellerProduct.Product.ProductImage ?? new byte[0]))" class="mr-3 align-self-center" style="width: 50px;">
                <div class="media-body">
                    <h5 class="mt-0">@item.SellerProduct.Product.Name</h5>
                </div>
            </div>
        </td>
                        <td>
                            <div class="input-group">
                                <button class="btn btn-outline-secondary" type="button" data-action="decrement">-</button>
                                <input type="hidden" name="cartItemId" value="@item.Id" />
                                <input type="text" class="form-control" style="width:25px" value="@item.Count" disabled>
                                <button class="btn btn-outline-secondary" type="button" data-action="increment">+</button>
                            </div>
                        </td>
                        <td>$@item.SellerProduct.Price</td>
                        <td>

                            <button type="button" class="btn btn-danger" data-action="remove">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4 mt-8">
        <h2>Summary</h2>
        <table class="table table-bordered">
            <tbody>
                <tr>
                    <td>Subtotal</td>
                    <td>$@Model.Sum(p => p.Count * p.SellerProduct.Price)</td>
                </tr>
                <tr>
                    <td>Shipping</td>
                    <td>$0</td>
                </tr>
                <tr>
                    <td>Total</td>
                    <td>$@Model.Sum(p => p.Count * p.SellerProduct.Price)</td>
                </tr>
            </tbody>
        </table>
        <div class="form-group">
            <label for="inputAddress">Address</label>
            <select class="form-control" id="inputAddress">
                <option selected>Choose...</option>
                <option>123 Main St</option>
                <option>456 Maple Ave</option>
                <option>789 Oak Blvd</option>
            </select>
        </div>
        <button type="button" class="btn btn-primary btn-lg btn-block">Checkout</button>
    </div>
</div>

@section scripts {
    <script>


        $('[data-action="increment"], [data-action="decrement"], [data-action="remove"]').click(function () {
    var input = $(this).siblings('input[type="text"]');
    var quantity = parseInt(input.val());

    if ($(this).data('action') === 'increment') {
        input.val(quantity + 1);
    } else if ($(this).data('action') === 'decrement' && quantity > 1) {
        input.val(quantity - 1);
    } else {
        $(this).closest('tr').remove();
    }

    var cartItemId = $(this).siblings('input[name="cartItemId"]').val();
    var action = $(this).data('action');

    updateCartItem(cartItemId, quantity, action);
});

function updateCartItem(cartItemId, quantity, action) {
    fetch('@Url.Action("UpdateCartItem", "Cart")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            cartItemId: cartItemId,
            quantity: quantity,
            action: action
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log(data);
    })
    .catch(error => {
        console.error('There was a problem with the fetch operation:', error);
    });
}



        //$(function () {
        //    $('[data-action="increment"]').click(function () {
        //        var input = $(this).siblings('input[type="text"]');
        //        var quantity = parseInt(input.val());
        //        input.val(quantity + 1);
        //    });

        //    $('[data-action="decrement"]').click(function () {
        //        var input = $(this).siblings('input[type="text"]');
        //        var quantity = parseInt(input.val());
        //        if (quantity > 1) {
        //            input.val(quantity - 1);
        //        }
        //    });

        //    $('[data-action="remove"]').click(function () {
        //        $(this).closest('tr').remove();
        //    });
        //});
    </script>
}