@using FinalProjectMVC.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity;


@* It was important to change from IdentityUser to ApplicationUser, or else `error`*@

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
        @* asp-route-x => creates a `query string parameter`called x 
            It gets added to the `url` and helps us gain more info about the in-coming GET request.
            In the case of `POST`, we would add the parameters in the `request body` as we 
            normally do. 
        *@
    <li class="nav-item">
        <a class="nav-link text-dark" asp-route-Customer="True" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-route-Customer="False" asp-area="Identity" asp-page="/Account/Register">Start Selling</a>
        </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
